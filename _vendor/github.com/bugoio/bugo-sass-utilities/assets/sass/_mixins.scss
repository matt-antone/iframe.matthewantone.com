/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints

@mixin respond-to( $breakpoint ) {
  // If the key exists in the map
  @if map-has-key( $breakpoints, $breakpoint ) {
    // Prints a media query based on the value
    @media ( min-width: map-get( $breakpoints, $breakpoint ) ) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys( $breakpoints )}.";
  }
}

@mixin set-margin($top:false,$right:false,$bottom:false,$left:false){
  @if $top != false and is_numeric( $top ){
    @include ms-respond( margin-top, $top );
  } @else {
    margin-top: 0;
  }
  @if $right != false and is_numeric( $right ){
    @include ms-respond( margin-right, $right );
  } @else {
    margin-right: 0;
  }
  @if $bottom != false and is_numeric( $bottom ){
    @include ms-respond( margin-bottom, $bottom );
  } @else {
    margin-bottom: 0;
  }
  @if $left != false and is_numeric( $left ){
    @include ms-respond( margin-left, $left );
  } @else {
    margin-left: 0;
  }
}

@mixin set-padding($top:false,$right:false,$bottom:false,$left:false){
  @if $top != false and is_numeric( $top ){
    @include ms-respond( padding-top, $top );
  } @else {
    padding-top: 0;
  }
  @if $right != false and is_numeric( $right ){
    @include ms-respond( padding-right, $right );
  } @else {
    padding-right: 0;
  }
  @if $bottom != false and is_numeric( $bottom ){
    @include ms-respond( padding-bottom, $bottom );
  } @else {
    padding-bottom: 0;
  }
  @if $left != false and is_numeric( $left ){
    @include ms-respond( padding-left, $left );
  } @else {
    padding-left: 0;
  }
}


/**
 * Deprecated
 **/

@mixin space-element( $property, $x, $y ){
  @include space-element-x( $property, $x, $x );
  @include space-element-y( $property, $y, $y );
}

@mixin space-element-x( $property, $left, $right ){
  // Left
  @if $left != false and is_numeric( $left ){
    @include ms-respond( #{$property}-left, $left );
  } @else if $left != false and is_numeric( $left ) == false{
    #{$property}-left: $left;
  } @else {
    #{$property}-left: 0;
  }

  // right
  @if $right != false and is_numeric( $right ){
    @include ms-respond( #{$property}-right, $right );
  } @else if $right != false and is_numeric( $right ) == false{
    #{$property}-right: $right;
  } @else {
    #{$property}-right: 0;
  }
}

@mixin space-element-y( $property, $top, $bottom ){
  // top
  @if $top != false and is_numeric( $top ){
    @include ms-respond( #{$property}-top, $top );
  } @else if $top != false and is_numeric( $top ) == false{
    #{$property}-top: $top;
  } @else {
    #{$property}-top: 0;
  }

  // bottom
  @if $bottom != false and is_numeric( $bottom ){
    @include ms-respond( #{$property}-bottom, $bottom );
  } @else if $bottom != false and is_numeric( $bottom ) == false{
    #{$property}-bottom: $bottom;
  } @else {
    #{$property}-bottom: 0;
  }
}

@mixin grid-gaps( $column: false, $row: false ){
  // column gap
  @if $column != false and is_numeric( $column ){
    @include ms-respond( grid-column-gap, $column );
  } @else if $column != false and is_numeric( $column ) == false{
    grid-column-gap: $column;
  } @else {
    grid-column-gap: 0;
  }

  // row gap
  @if $row != false and is_numeric( $row ){
    @include ms-respond( grid-row-gap, $row );
  } @else if $row != false and is_numeric( $row ) == false{
    grid-row-gap: $row;
  } @else {
    grid-row-gap: 0;
  }
}

@mixin color-mixes( $name, $text, $bg: transparent, $heading: $text ){
  .#{$name} {
    background-color: map-get( $theme-colors, $bg );
    color: map-get( $theme-colors, $text );

    a {
      color: darken( map-get( $theme-colors, $text ), 20% );
    }

    h1, h2, h3, h4, h5, h6 {
      color: map-get( $theme-colors, $text );
      a {
        color: darken( map-get( $theme-colors, $text ), 20% );
      }
    }
  }
}

@mixin responsive-property( $values, $property ) {
  @each $breakpoint, $value in $values {
    @include respond-to( $breakpoint ){
      #{$property}: $value;
    }
  }
}

@mixin heading-size( $el, $heading, $multiplier: 1 ) {
  #{$el},.#{$el} {
    @each $breakpoint, $value in $heading {
      @include respond-to( $breakpoint ){
        @include ms-respond( font-size, $value * $multiplier );

        small {
          @include ms-respond( font-size, $value * $multiplier - 0.5);
        }
      }
    }
  }
}

@mixin aspect-ratio( $hero ) {
  @each $breakpoint, $value in $hero {
    @include respond-to( $breakpoint ){
      padding-top: $value;
    }
  }
}

@mixin make-columns($ratio: $global-padding, $cols: 3){
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;

  @include ms-respond(--marginX,$ratio);
  margin-right: calc(var(--marginX) * -1);
  margin-left: calc(var(--marginX) * -1);

  @include respond-to(md){
    flex-wrap: nowrap;
  }

  > * {
    @include ms-respond(--marginX,$ratio);
    @include ms-respond(margin-left,$ratio);
    @include ms-respond(margin-right,$ratio);
    box-sizing: border-box;
  }
}

@mixin truncate-container($lines: 4,$line-height: 1.3){
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  overflow: hidden;
  line-height: $line-height;
}

@mixin clamp($lines: 4,$line-height: 1.3){
  @include truncate-container($lines,$line-height);
}

//todo: deprecate
@mixin line-clamp($lines: 4,$line-height: 1.3){
  @include clamp($lines: 4,$line-height: 1.3);
}